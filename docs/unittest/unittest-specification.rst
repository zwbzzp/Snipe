单元测试规范说明书
=====================

单元测试方法
---------------------

目前单元测试采取：**基本路径覆盖法**

所谓基本路径是指程序中至少引进一条新的语句或一个新的条件的任一路径。

*从而，循环处理在计算路径时只计算一次*

基本路径覆盖法是在程序图的基础上，通过分析环形复杂性，导出基本路径集，然后设计测试用例使基本路径集中的每条路径至少经过一次。

从该基本路径集导出的测试用例能保证对程序中的每条语句至少执行一次，每个条件取得一次`真`值和`假`值。

所谓程序图，是一种简化了的程序流程图，图中用圆圈代表语句或条件，用箭头线代表控制流。在将程序流程图转化为程序图时，如果判定中有多个条件，应先将判定化成单一条件后再进行转化。
    
基本路径覆盖法步骤
----------------------------------

基本路径覆盖法适用于模块的详细设计结果及源程序代码，其主要步骤如下 ::
    
    (1) 以详细设计结果或源程序代码为基础，导出程序图；
        注意应将复合条件判定转化为单一条件判定

    (2) 计算程序图的环形复杂度；
        可以采用图形矩阵方法计算，也可采用其它方法来计算

    (3) 确定基本路径集；
        基本路径集的路径数就是环形复杂度大小

    (4) 生成测试用例，使基本路径集中的每条路径至少经过一次

演示Demo
----------------------------------

1. [1]根据左边的C函数画出其程序流程图

    **注：画图时应以`}`作为终点，而不是以`return语句`作为终点** ::

.. image:: /vinzor/phoenix/raw/ck-develop/docs/unittest/img/source.png

1. [2]根据程序流程图进行简化，画出程序图 ::

.. image:: /vinzor/phoenix/raw/ck-develop/docs/unittest/img/convert.png

2. 计算程序图的环形复杂度 ::

    有以下三种方法计算环形复杂度：

    (1) 程序图中环形区域的数量对应于环形复杂度

    (2) 给定程序图G的环形复杂度V(G)，定义 V(G) = E - N + 2，E是程序图中边的数量，N是程序图中结点的数量

    (3) 给定程序图G的环形复杂度V(G)，定义 V(G) = P + 1，P是程序图G中判定结点的数量

.. image:: /vinzor/phoenix/raw/ck-develop/docs/unittest/img/complexity.png

3. 确定基本路径集 ::

    根据上面的计算方法，可得出基本路径集的路径数为4

    路径1: 4-14

    路径2: 4-6-7-14

    路径3: 4-6-8-9-13-4-14

    路径4: 4-6-8-11-13-4-14

4. 生成测试用例 ::

    针对[路径1: 4-14]: 
    输入数据：iRecordNum=0，或者取小于0的某一个值
    预期结果：x=0

    针对[路径2: 4-6-7-14]: 
    输入数据：iRecordNum=1，iType=0
    预期结果：x=2

    针对[路径3: 4-6-8-9-13-4-14]: 
    输入数据：iRecordNum=1，iType=1
    预期结果：x=10

    针对[路径4: 4-6-8-11-13-4-14]: 
    输入数据：iRecordNum=1，iType=2
    预期结果：x=20