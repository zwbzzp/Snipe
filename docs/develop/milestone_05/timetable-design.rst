时间表设计
=======================

时间表记录一天的时间段，用来给创建课时进行参照

时间表与课程课时关联，课时需要参照此表确定上下课时间

对时间表的操作是一个关键操作，正常业务下很少进行（学期开始、结束，紧急调整）。时间表的操作涉及到很多子操作，可能会耗时很长。

核心数据模型
------------------------

时间表时间段 Period ::

    start_time  开始时间
    end_time    结束时间

课时表 Lesson 与此表有外键依赖 ::

    start_period_id     开始时间段
    end_period_id       结束时间段

对 Lesson 设置时间时，逻辑为：如果时间为 Period ，那么同时设置 period_id 和开始或结束时间，如果时间为一个 datetime.time ，那么将 period_id 设置为 None，设置相应的开始、结束时间。即开始和结束时间总是有数据，而 period_id 只在有引用时会有数据

业务逻辑
--------------------------

课时表对时间段表的引用方式：
（1）设置上课时间，如果数据为时间段，那么设置 start_period_id 以及课时开始时间
（2）设置下课时间，如果数据为时间段，那么设置 end_period_id 以及课时结束时间
其它情况下，将相应的 period_id 置空，并设置相应的时间

调度时处理  
调度时，直接查课时的开始时间如果小于当前时间，以及结束时间大于当前时间，那么就可能开始调度  
调度时如果桌面数量小于课程容量，那么进行创建  
如果课程的已有桌面结束时间小于当前课时的结束时间，那么延长这些桌面的结束时间到当前课时结束时间  
调度允许课时的时间有重叠或冲突，不影响调度，在前端一般不允许产生重叠，只在修改时间表时会产生冲突

时间段的修改会影响到课时表，使用以下的原则分析业务处理流程：  
（1）已发生的事实不可修改，时间段的更新不影响已上课的课时  
（2）正在进行的业务不可中断，但需要用户确认  

创建时间段，不影响课时表

更新时间表，需要检查课时表是否合法，检查的过程如下：  
（1）每个时段的结束时间必须大于开始时间  
（2）时间段之间没有重叠，以时段的开始时间顺序排序，每个时段的开始时间大于等于前一时段结束时间  
（3）以时段的开始顺序排序，重新更新其 name 为相应的序号（1,2,3...）  

更新时间表时，涉及到 Lesson 与 Period 的关系

Lesson 与 Period 的引用关系如下（有引用为 P ，手工指定为 M）  
（a）开始 P 结束 M  
（b）开始 P 结束 P  
（c）开始 M 结束 P  
（d）开始 M 结束 M  

那么，课程的 Lesson 冲突时可能包括  
（1）引用了Period 的 Lesson 自身的合法性，开始 < 结束  
（2）同一课程的 Lesson 与其它 Lesson 有重叠  

目前不需要检查 Lesson 的冲突，冲突对调度不造成严重影响

更新时间段时，对课时表的引用更新如下：  
（1）已开始或已结束的课时，只把开始时间或结束时间引用了该时间段的外键引用置为 None  
（2）其它情况直接更新时间  

删除时间段，询问用户是否同时删除对应的课时（如果上课时间或下课时间引用了该时间段），正在上课的课时不受影响  
（1）已开始或已结束的课时，只把外键引用置为 None  
（2）其它情况直接删除  

已知问题
------------

更新时间段表时，会因为指定时间点与时段时间的不同，造成部分课时的时间冲突  
