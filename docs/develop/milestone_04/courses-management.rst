课程管理功能
=================================

目标使用者：管理员、老师

使用此管理，进行课程 CRUD 操作。导入或手工增加课程上课名单（或课室，系统自动增加名单）。可启动课程、关闭课程。

查看课程的 vm ，并手工增加或删除 vm 。绑定 vm 到名单上的用户，或解除绑定关系。

核心数据模型
----------------------------------

课程 course ::

    name    课程名称
    start_date  开始日期，如2015/12/11
    end_date    结束日期，如2016/3/1
    capacity    人数

    image_ref   镜像id，默认的id
    flavor_ref  配置id
    network_ref 网络id

    owner_id    创建该课程的用户id

    places      上课地点的集合

课时 lesson ::

    course_id           课程id delete-cacade

    start_date          课程开始日期 index
    start_period_id     开始时间段id，引用时间表
    start_time          课程开始时间不引用时间表

    end_date            课程结束日期 index
    end_period_id       结束时间段id，引用时间表
    end_time            课程结束时间不引用时间表

    start_datetime      课程开始时间
    end_datetime        课程结束时间

    为支持手工调整课程时间，以及让一个课时跨越多天，使用 start_date start_time 和 end_date end_time 组合
    手工调整后，应同时清除和引用时间表相关信息

时间表 period ::

    name    时间段名称

    start_time      时间段开始时间
    end_time        时间段结束时间

选课表 course_selections ::

    course_id   课程id
    user_id     学生id


页面跳转逻辑
----------------------------------

1. 课程列表 -> 点击课程 或 编辑课程 -> 课程详细信息


2. 课程列表 -> 点击创建课程 -> 填写基本信息 -> 添加上课时间 -> 添加学生名单

在保持原来的向导式交互的基础上，做了一些改进，具体如下::

    将基本信息、上课时间、学生名单的填写分成了三个不同的页面
    填写完基本信息并点击"下一步"之后，桌面随即创建
    添加上课时间以及学生名单步骤可以直接点击"下一步"跳过，可在后续自行添加

URL 列表 ::

    /courses        课程列表 GET
    /courses/       创建课程（向导页面） GET / POST
    /course/<id>   课程详细信息 GET / POST / DELETE

    /course/<id>/lessons   上课时间（向导页面） GET / POST

    /course/<id>/students  学生列表（向导页面） GET
    /course/<id>/students 学生列表  POST json 上传学生名单 / DELETE json 删除


核心业务逻辑
----------------------------------
课程、上课时间与学生名单的创建、修改与删除

业务概念
----
* 上课时间（段）

每个课程都拥有若干个上课时间（段），有6种添加上课时间的模式，可以从两个维度来确定：

    1. 按照频率，包括“每周”，“每天”，“一次”

    2. 按照时间，包括“节数”和“时间点”

6种模式的使用场景如下：

    1. “每周”+“节数”： 在每一周特定的节数上课（可跨天）。
    例：“每周周三第3节至周五第5节”、“每周四第8节到第10节”

    2. “每周”+“时间点”： 在每一周特定的时间点上课（可跨天）。
    例：“每周周一10:30至周三12:00”

    3. “每天”+“节数”： 在每天特定的节数上课。
    例：“每天第3节到第5节”

    4. “每天”+“时间点”： 在每天特定的时间点上课。
    例：“每天14:00到16:00”

    5. “一次”+“节数”： 在特定的日期和节数上课（一次性）。
    例： “2016年4月26日第5节至2016年4月28日第9节”、“2016年4月27日第3节到第5节”

    6. “一次”+“时间点”： 在特定的日期和时间点上课（一次性）。
    例： “2016年5月1日00:00至2016年5月7日00:00”

注意事项：

    1. 在课程开设时间内的上课时间才是合法的，例如课程设定的时间是4月1日到4月30日，即使设置了“每天”模式，安排的上课时间也只会安排到4月30日。

    2. 多种模式可以叠加使用，只要不与先前设置的上课时间冲突

    3. 尽管按照“每天”或“每周”去添加上课时间，仍可以按需要删除其中某个特定的时间段

页面功能
----
课程列表页面：

    1. 查看所有课程的名称、上课时间等概要信息，删除选中课程

    2. 点击每个课程的超链接，可以进入课程详细信息页面

课程详细信息页面：

    1. 课程的基本信息（课室、容量、网络等）

    2. 本周的上课时间分布情况（时间表）

    3. 本课程中所有上课的时间段

    4. 选课学生名单

    5. 课程基本信息可在本页面直接编辑

课程上课时间编辑页面：

    1. 6种模式添加上课时间

    2. 上课时间批量删除

    3. 本周课表显示

课程上课名单编辑页面：

    1. 从文件中批量导入学生名单

    2. 从多选框中搜索并选中学生，批量添加学生

    3. 从名单中批量删除学生


部分操作的实现
---------------------------------
* 关闭课程：

在处理用户关闭课程的指令时，系统后台会遇到两种情况需要处理，
第一种是正常关闭课程，即所有的课程桌面调度任务已经完成（成功或失败均可），这时用户发出课程关闭指令，系统的处理逻辑如下 ::

    1. 关闭课程的当时课时，即把当前课时的结束时间设置为当时

    2. 关闭课程所有桌面，即向 openstack 发出删除虚拟机命令，同时删除系统本地的桌面记录

第二种是课程启动中关闭课程，即课程桌面任务还在执行当中，这时用户发出了关闭课程指令。这种情况下，逻辑上需要先把未完成的桌面任务设置为不可用，阻止任务继续执行，
然后把这些未完成的任务回滚，对于已经完成的任务，则正常处理，即关闭已经创建好的课程桌面即可。具体逻辑步骤如下 ::

    1. 与正常关闭课程的第一个步骤相同

    2. 中断正在执行的桌面任务，设置正在执行的桌面任务为不可用，并回滚已经完成的任务阶段

    3. 与正常关闭课程的第三个步骤相同

由于现阶段任务模型的限制，不支持任务中断和任务回滚。现只实现如下逻辑 ::

    1. 与正常关闭课程的第一个步骤相同

    2. 设置正在运行的桌面任务为完成状态

    3. 与正常关闭课程的第三个步骤相同

    4. 重复1至3的步骤，即需要用户每隔一段时间按下课程关闭按钮，并查看课程桌面数量，直至所有课程桌面被成功关闭

* 补充桌面

补充课程桌面，即是向该课程添加指定数量，且与课程桌面配置一样的虚拟桌面。该功能可以方便用户随时为课程添加虚拟桌面。

前置条件 ::

    在课程的课时开始之后，允许用户补充课程桌面

实现逻辑 ::

    向课程补充桌面，事实上是向调度系统发起指定数量（用户提供的数量）的桌面任务，且该些桌面任务的桌面配置与该课程的课程桌面一样。接下来调度系统会执行虚拟
    桌面的调度任务，并最终完成虚拟桌面的创建


已知问题、扩展
---------------------------------
当前显示课表的纵轴依然为节数，对于按照特定时间点去添加的上课时间，处理方式是：如果上课的时间被某一节所包含，则高亮显示。期望一种更好的解决方案。